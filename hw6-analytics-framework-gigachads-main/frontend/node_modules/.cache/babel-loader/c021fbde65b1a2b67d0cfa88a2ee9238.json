{"ast":null,"code":"var _jsxFileName = \"/Users/nathanan/Documents/CMU Senior Spring 2022/17-514 Software Construction/hw5_santorini/santorini/frontend/src/App.tsx\";\nimport { Component } from 'react';\nimport './App.css';\nimport { Square } from './Square';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet oldHref = 'http://localhost:3000';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cells: [{\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }, {\n        text: ''\n      }],\n      instructions: '',\n      posSelection: -1,\n      workerSelection: -1,\n      turn: 0,\n      playerStates: [],\n      winner: -1,\n      canBuild: true,\n      canMove: true,\n      exception: ''\n    };\n    this.clickHandlerMainGame = this.clickHandlerMainGame.bind(this);\n    this.clickHandlerSelection = this.clickHandlerSelection.bind(this);\n    this.resetSelections = this.resetSelections.bind(this);\n  }\n\n  clickHandlerMainGame(index) {\n    if (this.tileHasWorkerFromPlayer(index, this.state.turn.valueOf()) !== -1) {\n      this.setState({\n        workerSelection: index\n      });\n    } else {\n      this.setState({\n        posSelection: index\n      });\n    }\n\n    this.updateInstructions();\n  }\n\n  clickHandlerSelection(index) {\n    if (this.tileHasWorker(index) === -1) {\n      this.setState({\n        posSelection: index\n      });\n    }\n\n    this.updateInstructions();\n  }\n\n  updateInstructions() {\n    let instructions = '';\n\n    if (this.state.winner !== -1) {\n      instructions = 'Player ' + this.state.winner + ' Won!';\n    } else if (this.state.workerSelection === -1) {\n      instructions = 'Select a worker';\n    } else if (this.state.posSelection === -1) {\n      instructions = 'Select a position';\n    } else {\n      instructions = 'Select a command';\n    }\n\n    this.setState({\n      instructions: instructions\n    });\n  }\n\n  updateStateFromGame(json) {\n    const turn = Number(this.getTurn(json));\n    const winner = Number(this.getWinner(json));\n    const canMove = this.getCanMove(json);\n    const canBuild = this.getCanBuild(json);\n    const exception = this.getException(json);\n    this.setState({\n      cells: this.convertToCell(json),\n      turn: turn,\n      playerStates: this.convertPlayerStates(json),\n      winner: winner,\n      canMove: canMove,\n      canBuild: canBuild,\n      exception: exception\n    });\n    this.updateInstructions();\n\n    if (!canMove && canBuild) {\n      this.setState({\n        workerSelection: this.getWorkerSelection()\n      });\n    }\n\n    if (!canMove && !canBuild) {\n      this.endTurn();\n    }\n  }\n\n  getWorkerSelection() {\n    const workerSelection = localStorage.getItem('workerSelection') || '-1';\n    return parseInt(workerSelection);\n  }\n\n  convertPlayerStates(p) {\n    const playerStates = [];\n\n    for (let i = 0; i < p.playerStates.length; i++) {\n      const workerStates = [];\n\n      if (p.playerStates[i].workerStates) {\n        for (let j = 0; j < p.playerStates[i].workerStates.length; j++) {\n          const w = {\n            workerId: p.playerStates[i].workerStates[j].workerId,\n            x: p.playerStates[i].workerStates[j].x,\n            y: p.playerStates[i].workerStates[j].y\n          };\n          workerStates.push(w);\n        }\n      }\n\n      const godCardString = p.playerStates[i].godCard ? p.playerStates[i].godCard : '';\n      const c = {\n        playerId: p.playerStates[i].playerId,\n        workerStates: workerStates,\n        godCardString: godCardString\n      };\n      playerStates.push(c);\n    }\n\n    return playerStates;\n  }\n\n  convertToCell(p) {\n    const newCells = [];\n\n    for (let i = 0; i < p.board.length; i++) {\n      const c = {\n        text: p.board[i].text\n      };\n      newCells.push(c);\n    }\n\n    return newCells;\n  }\n\n  getTurn(p) {\n    return p.turn;\n  }\n\n  getWinner(p) {\n    return p.winner;\n  }\n\n  getCanMove(p) {\n    return p.canMove;\n  }\n\n  getCanBuild(p) {\n    return p.canBuild;\n  }\n\n  getException(p) {\n    if (p.exception) {\n      return p.exception;\n    }\n\n    return '';\n  }\n\n  async newGame() {\n    const response = await fetch('newgame');\n    const json = await response.json();\n    this.updateStateFromGame(json);\n  }\n\n  async setWorker(url) {\n    const href = 'setworker?' + url.split('?')[1];\n    const response = await fetch(href);\n    const json = await response.json();\n    this.updateStateFromGame(json);\n\n    if (json.playerStates[this.state.turn.valueOf()].workerStates.length === 2) {\n      this.endTurn();\n    }\n  }\n\n  async move(url) {\n    const href = 'move?' + url.split('?')[1];\n    const response = await fetch(href);\n    const json = await response.json();\n    const index = url.split('=')[url.split('=').length - 1];\n    localStorage.setItem('workerSelection', index);\n    this.updateStateFromGame(json);\n  }\n\n  async addLevel(url) {\n    const href = 'addlevel?' + url.split('?')[1];\n    const response = await fetch(href);\n    const json = await response.json();\n    this.updateStateFromGame(json);\n  }\n\n  async addDome(url) {\n    const href = 'adddome?' + url.split('?')[1];\n    const response = await fetch(href);\n    const json = await response.json();\n    this.updateStateFromGame(json);\n  }\n\n  async setGodCard(url) {\n    const href = 'setgodcard?' + url.split('?')[1];\n    const response = await fetch(href);\n    const json = await response.json();\n    this.endTurn();\n    this.updateStateFromGame(json);\n  }\n\n  async undo() {\n    const response = await fetch('undo');\n    const json = await response.json();\n    this.updateStateFromGame(json);\n  }\n\n  async endTurn() {\n    const response = await fetch('endturn');\n    const json = await response.json();\n    this.updateStateFromGame(json);\n  }\n\n  async switch() {\n    if (window.location.href === 'http://localhost:3000/newgame' && oldHref !== window.location.href) {\n      console.log('newGame');\n      this.newGame();\n      oldHref = window.location.href;\n    } else if (window.location.href.split('?')[0] === 'http://localhost:3000/addlevel' && oldHref !== window.location.href) {\n      this.addLevel(window.location.href);\n      oldHref = window.location.href;\n    } else if (window.location.href.split('?')[0] === 'http://localhost:3000/adddome' && oldHref !== window.location.href) {\n      this.addDome(window.location.href);\n      oldHref = window.location.href;\n    } else if (window.location.href.split('?')[0] === 'http://localhost:3000/move' && oldHref !== window.location.href) {\n      this.move(window.location.href);\n      oldHref = window.location.href;\n    } else if (window.location.href === 'http://localhost:3000/undo' && oldHref !== window.location.href) {\n      this.undo();\n      oldHref = window.location.href;\n    } else if (window.location.href === 'http://localhost:3000/endturn' && oldHref !== window.location.href) {\n      console.log('endTurn');\n      this.endTurn();\n      oldHref = window.location.href;\n    } else if (window.location.href.split('?')[0] === 'http://localhost:3000/setworker' && oldHref !== window.location.href) {\n      console.log('setWorker');\n      this.setWorker(window.location.href);\n      oldHref = window.location.href;\n    } else if (window.location.href.split('?')[0] === 'http://localhost:3000/setgodcard' && oldHref !== window.location.href) {\n      console.log('setgodcard');\n      this.setGodCard(window.location.href);\n      oldHref = window.location.href;\n    }\n  }\n\n  tileHasWorker(index) {\n    const x = Math.floor(index / 5);\n    const y = index % 5;\n\n    for (const player of this.state.playerStates) {\n      for (const workerState of player.workerStates) {\n        if (workerState.x === x && workerState.y === y) {\n          return workerState.workerId;\n        }\n      }\n    }\n\n    return -1;\n  }\n\n  getPlayerFromTile(index) {\n    const x = Math.floor(index / 5);\n    const y = index % 5;\n\n    for (const player of this.state.playerStates) {\n      for (const workerState of player.workerStates) {\n        if (workerState.x === x && workerState.y === y) {\n          return player.playerId;\n        }\n      }\n    }\n\n    return -1;\n  }\n\n  tileHasWorkerFromPlayer(index, playerId) {\n    const x = Math.floor(index / 5);\n    const y = index % 5;\n\n    if (this.state.playerStates !== [] && this.state.playerStates[playerId]) {\n      const player = this.state.playerStates[playerId];\n\n      for (const workerState of player.workerStates) {\n        if (workerState.x === x && workerState.y === y) {\n          return workerState.workerId;\n        }\n      }\n    }\n\n    return -1;\n  }\n\n  resetSelections() {\n    this.setState({\n      workerSelection: -1,\n      posSelection: -1\n    });\n  }\n\n  generateGodCardScreen() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Santorini\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"It is Player \", this.state.turn, \"'s turn \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Instruction: Choose a god card.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"bottombar\",\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/setgodcard?card=None\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"None\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/setgodcard?card=Demeter\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Demeter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 46\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/setgodcard?card=Pan\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Pan\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/setgodcard?card=Minotaur\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Minotaur\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 47\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/newgame\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"New Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 30\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this);\n  }\n\n  generateSelectWorkerScreen() {\n    const rows = [0, 0, 0, 0, 0].map((_, i) => {\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [...this.state.cells].splice(i * 5, 5).map((_ref, j) => {\n          let {\n            text\n          } = _ref;\n          const index = i * 5 + j;\n          let color = 'darkorange';\n\n          if (this.state.workerSelection === index) {\n            color = 'blue';\n          } else if (this.state.posSelection === index) {\n            color = 'green';\n          }\n\n          let circleBorder = '0px';\n          let circleColor = 'white';\n\n          if (this.tileHasWorker(index) !== -1) {\n            circleBorder = '10px';\n\n            if (this.getPlayerFromTile(index) === 0) {\n              circleColor = 'black';\n            }\n          }\n\n          return /*#__PURE__*/_jsxDEV(Square, {\n            onClick: () => {\n              this.clickHandlerSelection(i * 5 + j);\n            },\n            contents: text,\n            color: color,\n            circleBorder: circleBorder,\n            circleColor: circleColor\n          }, i * 5 + j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 15\n          }, this);\n        })\n      }, 'row_' + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this);\n    });\n    let playerStatesP = [];\n\n    if (this.state.playerStates !== [] && this.state.playerStates[0] && this.state.playerStates[0].hasOwnProperty('workerStates')) {\n      playerStatesP = this.state.playerStates.map(_ref2 => {\n        let {\n          playerId,\n          workerStates\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Player\", playerId, \":\", workerStates.map(_ref3 => {\n            let {\n              workerId,\n              x,\n              y\n            } = _ref3;\n            return /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"workerId \", workerId, \": (\", x, \",\", y, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 55\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 11\n        }, this);\n      });\n    }\n\n    const decisionState = 'player=' + this.state.turn + '&worker=' + this.tileHasWorker(this.state.workerSelection.valueOf()) + '&pos=' + this.state.posSelection;\n    let godCard = '';\n\n    if (this.state.playerStates.length > 0) {\n      godCard = String(this.state.playerStates[this.state.turn.valueOf()].godCardString);\n    }\n\n    let exception;\n\n    if (this.state.exception !== '') {\n      exception = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Try again! \", this.state.exception]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 19\n      }, this);\n    }\n\n    const workerSelectionScreen = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Santorini\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 11\n        }, this), exception, /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"It is Player \", this.state.turn, \"'s turn \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Player \", this.state.turn, \" has GodCard: \", godCard, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Instruction: Select a worker position\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Position Selection: \", this.state.posSelection]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          cellSpacing: \"0\",\n          id: \"table\",\n          style: {\n            margin: 'auto',\n            width: 'auto',\n            height: 'auto',\n            backgroundColor: 'darkorange',\n            color: 'white',\n            fontSize: '3em',\n            tableLayout: 'fixed'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: rows\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"bottombar\",\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.resetSelections,\n            children: \"Reset Selection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: '/setworker?' + decisionState,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"SetWorker\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 51\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/newgame\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"New Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 30\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 7\n    }, this);\n\n    return workerSelectionScreen;\n  }\n\n  generateMainGame() {\n    const rows = [0, 0, 0, 0, 0].map((_, i) => {\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [...this.state.cells].splice(i * 5, 5).map((_ref4, j) => {\n          let {\n            text\n          } = _ref4;\n          const index = i * 5 + j;\n          let color = 'darkorange';\n\n          if (this.state.workerSelection === index) {\n            color = 'blue';\n          } else if (this.state.posSelection === index) {\n            color = 'green';\n          }\n\n          let circleBorder = '0px';\n          let circleColor = 'white';\n\n          if (this.tileHasWorker(index) !== -1) {\n            circleBorder = '10px';\n\n            if (this.getPlayerFromTile(index) === 0) {\n              circleColor = 'black';\n            }\n          }\n\n          return /*#__PURE__*/_jsxDEV(Square, {\n            onClick: () => {\n              this.clickHandlerMainGame(i * 5 + j);\n            },\n            contents: text,\n            color: color,\n            circleBorder: circleBorder,\n            circleColor: circleColor\n          }, i * 5 + j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 15\n          }, this);\n        })\n      }, 'row_' + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 9\n      }, this);\n    });\n    let playerStatesP = [];\n\n    if (this.state.playerStates !== [] && this.state.playerStates[0] && this.state.playerStates[0].hasOwnProperty('workerStates')) {\n      playerStatesP = this.state.playerStates.map(_ref5 => {\n        let {\n          playerId,\n          workerStates\n        } = _ref5;\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Player\", playerId, \":\", workerStates.map(_ref6 => {\n            let {\n              workerId,\n              x,\n              y\n            } = _ref6;\n            return /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"workerId \", workerId, \": (\", x, \",\", y, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 55\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 11\n        }, this);\n      });\n    }\n\n    const decisionState = 'player=' + this.state.turn + '&worker=' + this.tileHasWorker(this.state.workerSelection.valueOf()) + '&pos=' + this.state.posSelection;\n    let godCard = '';\n\n    if (this.state.playerStates.length > 0) {\n      godCard = String(this.state.playerStates[this.state.turn.valueOf()].godCardString);\n    }\n\n    let addLevelButton;\n    let addDomeButton;\n    let moveButton;\n\n    if (this.state.canMove) {\n      moveButton = /*#__PURE__*/_jsxDEV(\"a\", {\n        href: '/move?' + decisionState,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Move\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 55\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 20\n      }, this);\n    } else {\n      addDomeButton = /*#__PURE__*/_jsxDEV(\"a\", {\n        href: '/adddome?' + decisionState,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Build Dome\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 61\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 23\n      }, this);\n      addLevelButton = /*#__PURE__*/_jsxDEV(\"a\", {\n        href: '/addlevel?' + decisionState,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Build Level\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 63\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 24\n      }, this);\n    }\n\n    let exception;\n\n    if (this.state.exception !== '') {\n      exception = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error! \", this.state.exception]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 19\n      }, this);\n    }\n\n    const mainGame = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Santorini\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 11\n        }, this), exception, /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"It is Player \", this.state.turn, \"'s turn \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Player \", this.state.turn, \" has GodCard: \", godCard, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Instruction: \", this.state.instructions]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Worker Selection: \", this.state.workerSelection]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Position Selection: \", this.state.posSelection]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Player can Move? \", Boolean(this.state.canMove).toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Player can Build? \", Boolean(this.state.canBuild).toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          cellSpacing: \"0\",\n          id: \"table\",\n          style: {\n            margin: 'auto',\n            width: 'auto',\n            height: 'auto',\n            backgroundColor: 'darkorange',\n            color: 'white',\n            fontSize: '3em',\n            tableLayout: 'fixed'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: rows\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"bottombar\",\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.resetSelections,\n            children: \"Reset Selections\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 11\n        }, this), addLevelButton, addDomeButton, moveButton, /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/endturn\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"End Turn Early\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 30\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/newgame\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"New Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 30\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 568,\n      columnNumber: 7\n    }, this);\n\n    const wonGame = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Santorini\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"It is Player \", this.state.turn, \"'s turn \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Player \", this.state.turn, \" has GodCard: \", godCard, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Instruction: \", this.state.instructions]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          cellSpacing: \"0\",\n          id: \"table\",\n          style: {\n            margin: 'auto',\n            width: 'auto',\n            height: 'auto',\n            backgroundColor: 'darkorange',\n            color: 'white',\n            fontSize: '3em',\n            tableLayout: 'fixed'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: rows\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"bottombar\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/newgame\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"New Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 632,\n            columnNumber: 30\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 7\n    }, this);\n\n    if (this.state.winner !== -1) {\n      return wonGame;\n    }\n\n    return mainGame;\n  }\n\n  render() {\n    this.switch();\n    const godCardScreenBool = this.state.playerStates.length > 0 && (this.state.playerStates[0].godCardString === '' || this.state.playerStates[1].godCardString === '');\n    const selectWorkerState = this.state.playerStates.length > 0 && (this.state.playerStates[0].workerStates === undefined || this.state.playerStates[0].workerStates.length < 2 || this.state.playerStates[1].workerStates === undefined || this.state.playerStates[1].workerStates.length < 2);\n\n    if (godCardScreenBool) {\n      return this.generateGodCardScreen();\n    } else if (selectWorkerState) {\n      return this.generateSelectWorkerScreen();\n    } else if (godCardScreenBool || selectWorkerState) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \" Loading... \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 14\n      }, this);\n    }\n\n    return this.generateMainGame();\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/nathanan/Documents/CMU Senior Spring 2022/17-514 Software Construction/hw5_santorini/santorini/frontend/src/App.tsx"],"names":["Component","Square","oldHref","App","constructor","props","state","cells","text","instructions","posSelection","workerSelection","turn","playerStates","winner","canBuild","canMove","exception","clickHandlerMainGame","bind","clickHandlerSelection","resetSelections","index","tileHasWorkerFromPlayer","valueOf","setState","updateInstructions","tileHasWorker","updateStateFromGame","json","Number","getTurn","getWinner","getCanMove","getCanBuild","getException","convertToCell","convertPlayerStates","getWorkerSelection","endTurn","localStorage","getItem","parseInt","p","i","length","workerStates","j","w","workerId","x","y","push","godCardString","godCard","c","playerId","newCells","board","newGame","response","fetch","setWorker","url","href","split","move","setItem","addLevel","addDome","setGodCard","undo","switch","window","location","console","log","Math","floor","player","workerState","getPlayerFromTile","generateGodCardScreen","textAlign","generateSelectWorkerScreen","rows","map","_","splice","color","circleBorder","circleColor","playerStatesP","hasOwnProperty","decisionState","String","workerSelectionScreen","margin","width","height","backgroundColor","fontSize","tableLayout","generateMainGame","addLevelButton","addDomeButton","moveButton","mainGame","Boolean","toString","wonGame","render","godCardScreenBool","selectWorkerState","undefined"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport './App.css'\nimport { Square } from './Square'\n\nlet oldHref = 'http://localhost:3000'\n\ninterface Cell {\n  text: String\n}\n\ninterface WorkerState {\n  workerId: Number\n  x: Number\n  y: Number\n}\n\ninterface PlayerState {\n  playerId: Number\n  workerStates: WorkerState[]\n  godCardString: String\n}\n\ninterface Cells {\n  cells: Cell[]\n  instructions: String\n  playerStates: PlayerState[]\n  workerSelection: Number\n  posSelection: Number\n  turn: Number\n  winner: Number\n  canMove: boolean\n  canBuild: boolean\n  exception: String\n}\n\ninterface Props { }\n\nclass App extends Component<Props, Cells> {\n  constructor (props: Props) {\n    super(props)\n    this.state = {\n      cells: [\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' },\n        { text: '' }\n      ],\n      instructions: '',\n      posSelection: -1,\n      workerSelection: -1,\n      turn: 0,\n      playerStates: [],\n      winner: -1,\n      canBuild: true,\n      canMove: true,\n      exception: ''\n    }\n    this.clickHandlerMainGame = this.clickHandlerMainGame.bind(this)\n    this.clickHandlerSelection = this.clickHandlerSelection.bind(this)\n    this.resetSelections = this.resetSelections.bind(this)\n  }\n\n  clickHandlerMainGame (index: number): void {\n    if (this.tileHasWorkerFromPlayer(index, this.state.turn.valueOf()) !== -1) {\n      this.setState({ workerSelection: index })\n    } else {\n      this.setState({ posSelection: index })\n    }\n    this.updateInstructions()\n  }\n\n  clickHandlerSelection (index: number): void {\n    if (this.tileHasWorker(index) === -1) {\n      this.setState({ posSelection: index })\n    }\n    this.updateInstructions()\n  }\n\n  updateInstructions (): void {\n    let instructions = ''\n    if (this.state.winner !== -1) {\n      instructions = 'Player ' + this.state.winner + ' Won!'\n    } else if (this.state.workerSelection === -1) {\n      instructions = 'Select a worker'\n    } else if (this.state.posSelection === -1) {\n      instructions = 'Select a position'\n    } else {\n      instructions = 'Select a command'\n    }\n    this.setState({ instructions: instructions })\n  }\n\n  updateStateFromGame (json: Object): void {\n    const turn = Number(this.getTurn(json))\n    const winner = Number(this.getWinner(json))\n    const canMove = this.getCanMove(json)\n    const canBuild = this.getCanBuild(json)\n    const exception = this.getException(json)\n\n    this.setState({\n      cells: this.convertToCell(json),\n      turn: turn,\n      playerStates: this.convertPlayerStates(json),\n      winner: winner,\n      canMove: canMove,\n      canBuild: canBuild,\n      exception: exception\n    })\n\n    this.updateInstructions()\n\n    if (!canMove && canBuild) {\n      this.setState({ workerSelection: this.getWorkerSelection() })\n    }\n\n    if (!canMove && !canBuild) {\n      this.endTurn()\n    }\n  }\n\n  getWorkerSelection (): number {\n    const workerSelection = localStorage.getItem('workerSelection') || '-1'\n    return parseInt(workerSelection)\n  }\n\n  convertPlayerStates (p: any): PlayerState[] {\n    const playerStates: PlayerState[] = []\n    for (let i = 0; i < p.playerStates.length; i++) {\n      const workerStates: WorkerState[] = []\n      if (p.playerStates[i].workerStates) {\n        for (let j = 0; j < p.playerStates[i].workerStates.length; j++) {\n          const w: WorkerState = {\n            workerId: p.playerStates[i].workerStates[j].workerId,\n            x: p.playerStates[i].workerStates[j].x,\n            y: p.playerStates[i].workerStates[j].y\n          }\n          workerStates.push(w)\n        }\n      }\n\n      const godCardString = p.playerStates[i].godCard ? p.playerStates[i].godCard : ''\n      const c: PlayerState = {\n        playerId: p.playerStates[i].playerId,\n        workerStates: workerStates,\n        godCardString: godCardString\n      }\n      playerStates.push(c)\n    }\n    return playerStates\n  }\n\n  convertToCell (p: any): Cell[] {\n    const newCells: Cell[] = []\n\n    for (let i = 0; i < p.board.length; i++) {\n      const c: Cell = {\n        text: p.board[i].text\n      }\n      newCells.push(c)\n    }\n\n    return newCells\n  }\n\n  getTurn (p: any): String {\n    return p.turn\n  }\n\n  getWinner (p: any): String | undefined {\n    return p.winner\n  }\n\n  getCanMove (p: any): boolean {\n    return p.canMove\n  }\n\n  getCanBuild (p: any): boolean {\n    return p.canBuild\n  }\n\n  getException (p: any): String {\n    if (p.exception) {\n      return p.exception\n    }\n    return ''\n  }\n\n  async newGame (): Promise<void> {\n    const response = await fetch('newgame')\n    const json = await response.json()\n    this.updateStateFromGame(json)\n  }\n\n  async setWorker (url: String): Promise<void> {\n    const href = 'setworker?' + url.split('?')[1]\n    const response = await fetch(href)\n    const json = await response.json()\n    this.updateStateFromGame(json)\n    if (json.playerStates[this.state.turn.valueOf()].workerStates.length === 2) {\n      this.endTurn()\n    }\n  }\n\n  async move (url: String): Promise<void> {\n    const href = 'move?' + url.split('?')[1]\n    const response = await fetch(href)\n    const json = await response.json()\n    const index = url.split('=')[url.split('=').length - 1]\n    localStorage.setItem('workerSelection', index)\n\n    this.updateStateFromGame(json)\n  }\n\n  async addLevel (url: String): Promise<void> {\n    const href = 'addlevel?' + url.split('?')[1]\n    const response = await fetch(href)\n    const json = await response.json()\n    this.updateStateFromGame(json)\n  }\n\n  async addDome (url: String): Promise<void> {\n    const href = 'adddome?' + url.split('?')[1]\n    const response = await fetch(href)\n    const json = await response.json()\n    this.updateStateFromGame(json)\n  }\n\n  async setGodCard (url: String): Promise<void> {\n    const href = 'setgodcard?' + url.split('?')[1]\n    const response = await fetch(href)\n    const json = await response.json()\n    this.endTurn()\n    this.updateStateFromGame(json)\n  }\n\n  async undo (): Promise<void> {\n    const response = await fetch('undo')\n    const json = await response.json()\n    this.updateStateFromGame(json)\n  }\n\n  async endTurn (): Promise<void> {\n    const response = await fetch('endturn')\n    const json = await response.json()\n    this.updateStateFromGame(json)\n  }\n\n  async switch (): Promise<void> {\n    if (\n      window.location.href === 'http://localhost:3000/newgame' &&\n      oldHref !== window.location.href\n    ) {\n      console.log('newGame')\n      this.newGame()\n      oldHref = window.location.href\n    } else if (\n      window.location.href.split('?')[0] === 'http://localhost:3000/addlevel' &&\n      oldHref !== window.location.href\n    ) {\n      this.addLevel(window.location.href)\n      oldHref = window.location.href\n    } else if (\n      window.location.href.split('?')[0] === 'http://localhost:3000/adddome' &&\n      oldHref !== window.location.href\n    ) {\n      this.addDome(window.location.href)\n      oldHref = window.location.href\n    } else if (\n      window.location.href.split('?')[0] === 'http://localhost:3000/move' &&\n        oldHref !== window.location.href\n    ) {\n      this.move(window.location.href)\n      oldHref = window.location.href\n    } else if (\n      window.location.href === 'http://localhost:3000/undo' &&\n      oldHref !== window.location.href\n    ) {\n      this.undo()\n      oldHref = window.location.href\n    } else if (\n      window.location.href === 'http://localhost:3000/endturn' &&\n      oldHref !== window.location.href\n    ) {\n      console.log('endTurn')\n      this.endTurn()\n      oldHref = window.location.href\n    } else if (\n      window.location.href.split('?')[0] === 'http://localhost:3000/setworker' &&\n      oldHref !== window.location.href\n    ) {\n      console.log('setWorker')\n      this.setWorker(window.location.href)\n      oldHref = window.location.href\n    } else if (\n      window.location.href.split('?')[0] === 'http://localhost:3000/setgodcard' &&\n      oldHref !== window.location.href\n    ) {\n      console.log('setgodcard')\n      this.setGodCard(window.location.href)\n      oldHref = window.location.href\n    }\n  };\n\n  tileHasWorker (index: number): Number {\n    const x: number = Math.floor(index / 5)\n    const y: number = index % 5\n    for (const player of this.state.playerStates) {\n      for (const workerState of player.workerStates) {\n        if (workerState.x === x && workerState.y === y) {\n          return (workerState.workerId)\n        }\n      }\n    }\n    return -1\n  }\n\n  getPlayerFromTile (index: number): Number {\n    const x: number = Math.floor(index / 5)\n    const y: number = index % 5\n    for (const player of this.state.playerStates) {\n      for (const workerState of player.workerStates) {\n        if (workerState.x === x && workerState.y === y) {\n          return (player.playerId)\n        }\n      }\n    }\n    return -1\n  }\n\n  tileHasWorkerFromPlayer (index: number, playerId: number): Number {\n    const x: number = Math.floor(index / 5)\n    const y: number = index % 5\n\n    if (this.state.playerStates !== [] && this.state.playerStates[playerId]) {\n      const player = this.state.playerStates[playerId]\n      for (const workerState of player.workerStates) {\n        if (workerState.x === x && workerState.y === y) {\n          return (workerState.workerId)\n        }\n      }\n    }\n    return -1\n  }\n\n  resetSelections (): void {\n    this.setState({ workerSelection: -1, posSelection: -1 })\n  }\n\n  generateGodCardScreen (): JSX.Element {\n    return (\n      <div className='App'>\n        <div style={{ textAlign: 'center' }}>\n          <h1>Santorini</h1>\n          <p>It is Player {this.state.turn}'s turn </p>\n          <p>Instruction: Choose a god card.</p>\n          <br />\n        </div>\n        <div id='bottombar'>\n          <a href='/setgodcard?card=None'><button>None</button></a>\n          <a href='/setgodcard?card=Demeter'><button>Demeter</button></a>\n          <a href='/setgodcard?card=Pan'><button>Pan</button></a>\n          <a href='/setgodcard?card=Minotaur'><button>Minotaur</button></a>\n          <a href='/newgame'><button>New Game</button></a>\n        </div>\n      </div>\n    )\n  }\n\n  generateSelectWorkerScreen (): JSX.Element {\n    const rows = [0, 0, 0, 0, 0].map((_, i) => {\n      return (\n        <tr key={'row_' + i}>\n          {[...this.state.cells].splice(i * 5, 5).map(({ text }, j) => {\n            const index = i * 5 + j\n            let color = 'darkorange'\n            if (this.state.workerSelection === index) {\n              color = 'blue'\n            } else if (this.state.posSelection === index) {\n              color = 'green'\n            }\n\n            let circleBorder = '0px'\n            let circleColor = 'white'\n            if (this.tileHasWorker(index) !== -1) {\n              circleBorder = '10px'\n              if (this.getPlayerFromTile(index) === 0) {\n                circleColor = 'black'\n              }\n            }\n            return (\n              <Square\n                key={i * 5 + j}\n                onClick={() => { this.clickHandlerSelection(i * 5 + j) }}\n                contents={text}\n                color={color}\n                circleBorder={circleBorder}\n                circleColor={circleColor}\n              />\n            )\n          }\n          )}\n        </tr>\n      )\n    }\n    )\n\n    let playerStatesP: JSX.Element[] = []\n\n    if (this.state.playerStates !== [] && this.state.playerStates[0] &&\n      this.state.playerStates[0].hasOwnProperty('workerStates')) {\n      playerStatesP = this.state.playerStates.map(({ playerId, workerStates }) => {\n        return (\n          <p>Player{playerId}:\n            {workerStates.map(({ workerId, x, y }) => <p>workerId {workerId}: ({x},{y})</p>)}\n          </p>\n        )\n      }\n      )\n    }\n    const decisionState = 'player=' + this.state.turn + '&worker=' +\n    this.tileHasWorker(this.state.workerSelection.valueOf()) + '&pos=' + this.state.posSelection\n\n    let godCard = ''\n\n    if (this.state.playerStates.length > 0) {\n      godCard = String(this.state.playerStates[this.state.turn.valueOf()].godCardString)\n    }\n\n    let exception\n    if (this.state.exception !== '') {\n      exception = <p>Try again! {this.state.exception}</p>\n    }\n\n    const workerSelectionScreen = (\n      <div className='App'>\n        <div style={{ textAlign: 'center' }}>\n          <h1>Santorini</h1>\n          {exception}\n          <p>It is Player {this.state.turn}'s turn </p>\n          <p>Player {this.state.turn} has GodCard: {godCard} </p>\n          <p>Instruction: Select a worker position</p>\n          <p>Position Selection: {this.state.posSelection}</p>\n          <table\n            cellSpacing='0' id='table' style={{\n              margin: 'auto',\n              width: 'auto',\n              height: 'auto',\n              backgroundColor: 'darkorange',\n              color: 'white',\n              fontSize: '3em',\n              tableLayout: 'fixed'\n            }}\n          >\n            <tbody>\n              {rows}\n            </tbody>\n          </table>\n          <br />\n        </div>\n        <div id='bottombar'>\n          <a><button onClick={this.resetSelections}>Reset Selection</button></a>\n          <a href={'/setworker?' + decisionState}><button>SetWorker</button></a>\n          <a href='/newgame'><button>New Game</button></a>\n        </div>\n      </div>\n    )\n    return workerSelectionScreen\n  }\n\n  generateMainGame (): JSX.Element {\n    const rows = [0, 0, 0, 0, 0].map((_, i) => {\n      return (\n        <tr key={'row_' + i}>\n          {[...this.state.cells].splice(i * 5, 5).map(({ text }, j) => {\n            const index = i * 5 + j\n            let color = 'darkorange'\n            if (this.state.workerSelection === index) {\n              color = 'blue'\n            } else if (this.state.posSelection === index) {\n              color = 'green'\n            }\n\n            let circleBorder = '0px'\n            let circleColor = 'white'\n            if (this.tileHasWorker(index) !== -1) {\n              circleBorder = '10px'\n              if (this.getPlayerFromTile(index) === 0) {\n                circleColor = 'black'\n              }\n            }\n            return (\n              <Square\n                key={i * 5 + j}\n                onClick={() => { this.clickHandlerMainGame(i * 5 + j) }}\n                contents={text}\n                color={color}\n                circleBorder={circleBorder}\n                circleColor={circleColor}\n              />\n            )\n          }\n          )}\n        </tr>\n      )\n    }\n    )\n\n    let playerStatesP: JSX.Element[] = []\n\n    if (this.state.playerStates !== [] && this.state.playerStates[0] &&\n      this.state.playerStates[0].hasOwnProperty('workerStates')) {\n      playerStatesP = this.state.playerStates.map(({ playerId, workerStates }) => {\n        return (\n          <p>Player{playerId}:\n            {workerStates.map(({ workerId, x, y }) => <p>workerId {workerId}: ({x},{y})</p>)}\n          </p>\n        )\n      }\n      )\n    }\n    const decisionState = 'player=' + this.state.turn + '&worker=' +\n    this.tileHasWorker(this.state.workerSelection.valueOf()) + '&pos=' + this.state.posSelection\n\n    let godCard = ''\n\n    if (this.state.playerStates.length > 0) {\n      godCard = String(this.state.playerStates[this.state.turn.valueOf()].godCardString)\n    }\n\n    let addLevelButton\n    let addDomeButton\n    let moveButton\n\n    if (this.state.canMove) {\n      moveButton = <a href={'/move?' + decisionState}><button>Move</button></a>\n    } else {\n      addDomeButton = <a href={'/adddome?' + decisionState}><button>Build Dome</button></a>\n      addLevelButton = <a href={'/addlevel?' + decisionState}><button>Build Level</button></a>\n    }\n\n    let exception\n    if (this.state.exception !== '') {\n      exception = <p>Error! {this.state.exception}</p>\n    }\n\n    const mainGame = (\n      <div className='App'>\n        <div style={{ textAlign: 'center' }}>\n          <h1>Santorini</h1>\n          {exception}\n          <p>It is Player {this.state.turn}'s turn </p>\n          <p>Player {this.state.turn} has GodCard: {godCard} </p>\n          <p>Instruction: {this.state.instructions}</p>\n          <p>Worker Selection: {this.state.workerSelection}</p>\n          <p>Position Selection: {this.state.posSelection}</p>\n          <p>Player can Move? {Boolean(this.state.canMove).toString()}</p>\n          <p>Player can Build? {Boolean(this.state.canBuild).toString()}</p>\n          <table\n            cellSpacing='0' id='table' style={{\n              margin: 'auto',\n              width: 'auto',\n              height: 'auto',\n              backgroundColor: 'darkorange',\n              color: 'white',\n              fontSize: '3em',\n              tableLayout: 'fixed'\n            }}\n          >\n            <tbody>\n              {rows}\n            </tbody>\n          </table>\n          <br />\n        </div>\n        <div id='bottombar'>\n          <a><button onClick={this.resetSelections}>Reset Selections</button></a>\n          {addLevelButton}\n          {addDomeButton}\n          {moveButton}\n          <a href='/endturn'><button>End Turn Early</button></a>\n          <a href='/newgame'><button>New Game</button></a>\n        </div>\n      </div>\n    )\n\n    const wonGame = (\n      <div className='App'>\n        <div style={{ textAlign: 'center' }}>\n          <h1>Santorini</h1>\n          <p>It is Player {this.state.turn}'s turn </p>\n          <p>Player {this.state.turn} has GodCard: {godCard} </p>\n          <p>Instruction: {this.state.instructions}</p>\n          <table\n            cellSpacing='0' id='table' style={{\n              margin: 'auto',\n              width: 'auto',\n              height: 'auto',\n              backgroundColor: 'darkorange',\n              color: 'white',\n              fontSize: '3em',\n              tableLayout: 'fixed'\n            }}\n          >\n            <tbody>\n              {rows}\n            </tbody>\n          </table>\n          <br />\n        </div>\n        <div id='bottombar'>\n          <a href='/newgame'><button>New Game</button></a>\n        </div>\n      </div>\n    )\n\n    if (this.state.winner !== -1) {\n      return wonGame\n    }\n    return mainGame\n  }\n\n  render (): JSX.Element {\n    this.switch()\n\n    const godCardScreenBool = this.state.playerStates.length > 0 &&\n    (this.state.playerStates[0].godCardString === '' || this.state.playerStates[1].godCardString === '')\n\n    const selectWorkerState = this.state.playerStates.length > 0 &&\n    ((this.state.playerStates[0].workerStates === undefined || this.state.playerStates[0].workerStates.length < 2) ||\n    (this.state.playerStates[1].workerStates === undefined || this.state.playerStates[1].workerStates.length < 2))\n\n    if (godCardScreenBool) {\n      return this.generateGodCardScreen()\n    } else if (selectWorkerState) {\n      return this.generateSelectWorkerScreen()\n    } else if (godCardScreenBool || selectWorkerState) {\n      return <div> Loading... </div>\n    }\n    return this.generateMainGame()\n  };\n};\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}