[{"/Users/imagine/hw6-analytics-framework-gigachads/frontend/src/index.tsx":"1","/Users/imagine/hw6-analytics-framework-gigachads/frontend/src/App.tsx":"2"},{"size":148,"mtime":1650463817801,"results":"3","hashOfConfig":"4"},{"size":4718,"mtime":1650492749324,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"is47bn",{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/Users/imagine/hw6-analytics-framework-gigachads/frontend/src/index.tsx",[],"/Users/imagine/hw6-analytics-framework-gigachads/frontend/src/App.tsx",["11","12","13","14"],"import { Component } from 'react'\nimport './App.css'\nimport { Square } from './Square'\n\nlet oldHref = 'http://localhost:3000'\n\n\ninterface Cells {\n  instructions: String\n  images: String[]\n  username: String\n  screen: number\n}\n\ninterface Props {\n}\n\nclass App extends Component<Props, Cells> {\n  constructor (props: Props) {\n    super(props)\n    this.state = {\n      instructions: '',\n      images: [],\n      username: '',\n      screen: 0\n    }\n    this.clickHandlerUsername = this.clickHandlerUsername.bind(this)\n  }\n\n  clickHandlerUsername (username: String) {\n    this.setState({ username: username })\n  }\n\n  updateInstructions () {\n    let instructions = 'TODO'\n    this.setState({ instructions: instructions })\n  }\n\n\n  getImages (p: any): String[] {\n    return p.filenames\n  }\n\n  async dataPlugin (url: String) {\n    const href = 'dataplugin?' + url.split('?')[1]\n    const response = await fetch(href)\n    console.log(\"got response: \" + response)\n    const json = await response.json()\n    console.log(\"Json: \" + json)\n    this.setState({ screen: 1})\n  }\n\n  async visPlugin (url: String) {\n    const href = 'visplugin?' + url.split('?')[1]\n    const response = await fetch(href)\n    console.log(\"got response: \" + response)\n    const json = await response.json()\n    console.log(\"Json: \" + json)\n    this.setState({ screen: 2, images: this.getImages(json)})\n    console.log(this.getImages(json)[0]);\n  }\n\n  async switch () {\n    if (\n      window.location.href.split('?')[0] === 'http://localhost:3000/dataplugin' &&\n      oldHref !== window.location.href\n    ) {\n      console.log('dataplugin')\n      this.dataPlugin(window.location.href)\n      oldHref = window.location.href\n    } else if (\n      window.location.href.split('?')[0] === 'http://localhost:3000/visplugin' &&\n      oldHref !== window.location.href\n    ) {\n      console.log('dataplugin')\n      this.visPlugin(window.location.href)\n      oldHref = window.location.href\n    }\n  };\n\n  generateDataPluginScreen () {\n    let instagramButton = <a href={'/dataplugin?name=instagram&username=' + this.state.username}><button>Instagram</button></a>;\n    let twitterButton = <a href={'/dataplugin?name=twitter&username=' + this.state.username}><button>Twitter</button></a>;\n    let redditButton = <a href={'/dataplugin?name=reddit&username=' + this.state.username}><button>Reddit</button></a>;\n    return (\n      <div className='App'>\n        <div style={{ textAlign: 'center' }}>\n          <h1>Chad Framework</h1>\n          <p>Instruction: Choose a data plugin.</p>\n          <br />\n        </div>\n        <h3>Enter Username: </h3>\n        <input \n        type=\"text\" \n        name=\"topicBox\" \n        placeholder=\"Username\" \n        value={ this.state.username.valueOf() }\n        onChange={e => this.clickHandlerUsername(e.target.value) } \n        style={{width: \"370px\", height: \"75px\"}}\n      />\n        <div id='bottombar'>\n          {instagramButton}\n          {twitterButton}\n          {redditButton}\n        </div>\n      </div>\n    )\n  }\n\n  generateVisPluginScreen () {\n    let colorGradient = <a href={'/visplugin?name=colorgradient'}><button>Color Gradient</button></a>;\n    let colorLikes = <a href={'/visplugin?name=colorandtime'}><button>Color vs. Time</button></a>;\n    let colorTime = <a href={'/visplugin?name=colorandlikes'}><button>Color vs. Likes</button></a>;\n    return (\n      <div className='App'>\n        <div style={{ textAlign: 'center' }}>\n          <h1>Chad Framework</h1>\n          <p>Instruction: Choose a visualization plugin.</p>\n          <br />\n        </div>\n        <div id='bottombar'>\n          {colorGradient}\n          {colorLikes}\n          {colorTime}\n        </div>\n      </div>\n    )\n  }\n\n  generateOutputScreen () {\n    console.log(this.state.images.length);\n    console.log(\"./visualization_images/\" + this.state.images[0].valueOf())\n    let images = <img src={require(\"./visualization_images/\" + this.state.images[0].valueOf())} height=\"300\" width=\"300\"></img>\n    // console.log(\"./visualization_images/\" + this.state.images[0].valueOf())\n    if(!window.location.hash) {\n      window.location.href = window.location + '#loaded';\n      window.location.reload();\n  }\n    return (\n      <div className='App'>\n        <div style={{ textAlign: 'center' }}>\n          <h1>Chad Framework</h1>\n          <p>View Your Images!</p>\n          <br />\n        </div>\n        <div id='bottombar'>\n          {images}\n        </div>\n      </div>\n    )\n  }\n\n  render () {\n    this.switch()\n    if (this.state.screen == 0) {\n      return this.generateDataPluginScreen()\n    } else if (this.state.screen == 1) {\n      return this.generateVisPluginScreen()\n    }\n    return this.generateOutputScreen()\n  };\n};\n\nexport default App\n",{"ruleId":"15","severity":1,"message":"16","line":3,"column":10,"nodeType":"17","messageId":"18","endLine":3,"endColumn":16},{"ruleId":"19","severity":1,"message":"20","line":133,"column":18,"nodeType":"21","endLine":133,"endColumn":122},{"ruleId":"22","severity":1,"message":"23","line":155,"column":27,"nodeType":"24","messageId":"25","endLine":155,"endColumn":29},{"ruleId":"22","severity":1,"message":"23","line":157,"column":34,"nodeType":"24","messageId":"25","endLine":157,"endColumn":36},"@typescript-eslint/no-unused-vars","'Square' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]